/*
 * Data Anonymization Server
 *
 * This is a data anonymization server. You can set the anonymization requirements for the different datasets individually, and upload data to them. The uploaded data is anonymized on the server and can be then downloaded.
 *
 * API version: 0.1-alpha
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"anondb"
	"anonmodel"
	"fmt"
	"net/http"

	"github.com/gorilla/mux"
)

const defaultPageSize = 1000

func dataNameGet(w http.ResponseWriter, r *http.Request) {
	_dataNameGet(w, r, anondb.ListDocuments)
}

func anonNameGet(w http.ResponseWriter, r *http.Request) {
	_dataNameGet(w, r, anondb.ListAnonDocuments)
}

func _dataNameGet(w http.ResponseWriter, r *http.Request, listDocuments func(string, int, string, *anonmodel.Documents) (string, error)) {
	size, from, err := readSizeAndFromQueryParams(r.URL, defaultPageSize)
	if err != nil {
		respondWithError(w, http.StatusBadRequest, err.Error())
		return
	}

	if from != "" && !anondb.IsValidID(from) {
		respondWithError(w, http.StatusBadRequest, fmt.Sprintf("The value '%v' for the query param 'from' is invalid", from))
		return
	}

	vars := mux.Vars(r)
	var documents anonmodel.Documents
	nextID, err := listDocuments(vars["name"], size, from, &documents)
	if err != nil {
		handleDBNotFound(err, w, http.StatusNotFound, "The specified dataset does not exist or there are no documents in it yet")
		return
	}

	result := ListDataResponse{Result: documents}
	if nextID != "" {
		result.Next = nextID
	}
	respondWithJSON(w, http.StatusOK, &result)
}

func dataNameDocumentIDGet(w http.ResponseWriter, r *http.Request) {
	_dataNameDocumentIDGet(w, r, anondb.GetDocument)
}

func anonNameDocumentIDGet(w http.ResponseWriter, r *http.Request) {
	_dataNameDocumentIDGet(w, r, anondb.GetAnonDocument)
}

func _dataNameDocumentIDGet(w http.ResponseWriter, r *http.Request, getDocument func(string, string, *anonmodel.Document) error) {
	vars := mux.Vars(r)
	var document anonmodel.Document

	if !anondb.IsValidID(vars["documentId"]) {
		respondWithError(w, http.StatusBadRequest, fmt.Sprintf("The value '%v' is not a valid document id", vars["documentId"]))
		return
	}

	if err := getDocument(vars["name"], vars["documentId"], &document); err != nil {
		handleDBNotFound(err, w, http.StatusNotFound, "The specified document does not exist")
		return
	}

	respondWithJSON(w, http.StatusOK, &document)
}
