// <auto-generated />
using System;
using System.Net.Http;
using System.Collections.Generic;
using Anonimization.RefitInternalGenerated;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

#pragma warning disable
namespace Anonimization.RefitInternalGenerated
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {

        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
    }
}
#pragma warning restore

#pragma warning disable CS8632 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context.
#pragma warning disable CS8669 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.
namespace Anonimization.Services
{
    using global::Anonimization.Models;
    using global::Refit;
    using global::System.Collections.Generic;
    using global::System.Threading.Tasks;
    using Document =  global::System.Collections.Generic.Dictionary<string, object>;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIAnonimizationApi : IAnonimizationApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIAnonimizationApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<Dataset> IAnonimizationApi.CreateDataset(string id, Dataset dataset)
        {
            var arguments = new object[] { id, dataset };
            var func = requestBuilder.BuildRestResultFuncForMethod("CreateDataset", new Type[] { typeof(string), typeof(Dataset) });
            return (Task<Dataset>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<EqulivalenceClass>> IAnonimizationApi.GetMatchingEqulivalenceClasses(Document document)
        {
            var arguments = new object[] { document };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetMatchingEqulivalenceClasses", new Type[] { typeof(Document) });
            return (Task<List<EqulivalenceClass>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<EqulivalenceClass> IAnonimizationApi.CreateEqulivalenceClass(EqulivalenceClass equlivalenceClass)
        {
            var arguments = new object[] { equlivalenceClass };
            var func = requestBuilder.BuildRestResultFuncForMethod("CreateEqulivalenceClass", new Type[] { typeof(EqulivalenceClass) });
            return (Task<EqulivalenceClass>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<bool> IAnonimizationApi.RegisterUploadIntent(string dataset, int id)
        {
            var arguments = new object[] { dataset, id };
            var func = requestBuilder.BuildRestResultFuncForMethod("RegisterUploadIntent", new Type[] { typeof(string), typeof(int) });
            return (Task<bool>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<bool> IAnonimizationApi.UploadDocument(string dataset, int id, Document document)
        {
            var arguments = new object[] { dataset, id, document };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadDocument", new Type[] { typeof(string), typeof(int), typeof(Document) });
            return (Task<bool>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CentralTableItem> IAnonimizationApi.CheckCentralTable(int id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("CheckCentralTable", new Type[] { typeof(int) });
            return (Task<CentralTableItem>)func(Client, arguments);
        }
    }
}

#pragma warning restore CS8632 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context.
#pragma warning restore CS8669 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.
